the probability of any combo can be simulated through a monte carlo generator

the permutations of players starting and folding
the combinations of cards on the table
in ones hand


the issue with this is there are too many permutations by the flop. The issue with abstractions is that it degrades accuracy and the abstractions may overlap.

7 3 unsuited

flop
3 7 5
6 4 
j k ...etc

there will be over 10000 permutations - need to play at least 1000 games

____-----poker hands-----________
royal flush
straight flush (single) (pair)
four of a kind(single)(pair)
full house (pair single)
flush( pair) (single)
three of a kind(single)(pair)
boarded_two_pair (single) (pair)



boarded_pair (13) -- (pair)
hand_high_card(ace - jack)
nothing

start off non-abstracting
-------> check if we can abstract ---->
abstract

_---------- pre flop--------------_



_---------not multiplied by flop---------_


some abstractions by the flop
flush -> (7)
pair(13) (pair in hand)
three_of_kind(13) (pair in hand)
two_pair (pair in hand)
flush_draw(13)
strait_draw(13) (
nothing ()

these layers are combinatorially 

-----poker hand (1326)-------------
1326 = 52 * 51 / 2
1225 = 50*49 / 2

--- flop (19600) ---------
aa
flop: n! / (r! * (n-r)!)
flop: 50! / (3 * 2 * 47!)
flop: 50 * 49 * 48 / (3 * 2)
a a 2s
a a 2c
a a 2d
a a 2h

-------turn(230300) ----------
probabiltiy of you winning by the flop
p_win = p_win_now - p(opponent)*p(winning_by_river) + p(you_winning_by_river)

probabiltiy of each draw is equal, so you just (need to count the times you win / times at play)
when you add an oponnent, you essentially half the times you win, or you double the times you lose


------say you're in preflop---------
AA (1326 combos) - dynamic programming
oponent 1: aa, ak .... (1225) runs  // Because you dont know what your op has you'll have to try every case)
the next 5 cards: .... 48 * 47 * 46 * 45 * 44/(5 * 4 * 3 * 2)AZ = (1712304) runs
 --so now do each run...1225*1712304...you lose if your oponent wins...so now count how many times your oponent wins

-----do this: calculate your hand value.... and compare it against your oponent value ----
keep in mind: that this is going to run over a billion times...
now you have: counts_yourop_wins, total_counts

oponent 2: assume that with a new oponent, that doubles the probability the op wins
now you have: counts_your_op_wins *2, total_counts

you have preflop probability now: ( you should cache this as it only takes 1326 memory)


---------say you're in flop--------------
AA (1326 combos) - dynamic programming
flop: (19600 combos) - dynamic programming ( you see whats available)
The probability that you win preflop has nothing to do with the probability now, so ignore last cache

oponent 1: aa, ak .....(1225) runs // Because you dont know what your op has
the next 2 cards: .....45*44 / 2 = 990 runs
 --so now do each run...1225*990...you lose if your oponent wins...so now count how many times your oponent wins


-------- say you're in turn ------------
the calculation is simply running 1225*43 runs

-------- say you're in river ------------
the calculation is simply running 1225 runs

the goal should be to make each run under 5 ns

















