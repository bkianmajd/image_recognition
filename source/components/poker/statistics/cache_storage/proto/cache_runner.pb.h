// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/poker/statistics/cache_storage/proto/cache_runner.proto

#ifndef PROTOBUF_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto__INCLUDED
#define PROTOBUF_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUseImpl();
void InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUse();
void InitDefaultsOpponentHandImpl();
void InitDefaultsOpponentHand();
void InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUseImpl();
void InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse();
void InitDefaultsPreflopHandGivenOponnentHandImpl();
void InitDefaultsPreflopHandGivenOponnentHand();
inline void InitDefaults() {
  InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUse();
  InitDefaultsOpponentHand();
  InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse();
  InitDefaultsPreflopHandGivenOponnentHand();
}
}  // namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto
namespace poker {
class OpponentHand;
class OpponentHandDefaultTypeInternal;
extern OpponentHandDefaultTypeInternal _OpponentHand_default_instance_;
class OpponentHand_LosingProbabilityEntry_DoNotUse;
class OpponentHand_LosingProbabilityEntry_DoNotUseDefaultTypeInternal;
extern OpponentHand_LosingProbabilityEntry_DoNotUseDefaultTypeInternal _OpponentHand_LosingProbabilityEntry_DoNotUse_default_instance_;
class PreflopHandGivenOponnentHand;
class PreflopHandGivenOponnentHandDefaultTypeInternal;
extern PreflopHandGivenOponnentHandDefaultTypeInternal _PreflopHandGivenOponnentHand_default_instance_;
class PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse;
class PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUseDefaultTypeInternal;
extern PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUseDefaultTypeInternal _PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse_default_instance_;
}  // namespace poker
namespace poker {

// ===================================================================

class OpponentHand_LosingProbabilityEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<OpponentHand_LosingProbabilityEntry_DoNotUse, 
    ::google::protobuf::int32, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<OpponentHand_LosingProbabilityEntry_DoNotUse, 
    ::google::protobuf::int32, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  OpponentHand_LosingProbabilityEntry_DoNotUse();
  OpponentHand_LosingProbabilityEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const OpponentHand_LosingProbabilityEntry_DoNotUse& other);
  static const OpponentHand_LosingProbabilityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpponentHand_LosingProbabilityEntry_DoNotUse*>(&_OpponentHand_LosingProbabilityEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class OpponentHand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.OpponentHand) */ {
 public:
  OpponentHand();
  virtual ~OpponentHand();

  OpponentHand(const OpponentHand& from);

  inline OpponentHand& operator=(const OpponentHand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpponentHand(OpponentHand&& from) noexcept
    : OpponentHand() {
    *this = ::std::move(from);
  }

  inline OpponentHand& operator=(OpponentHand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpponentHand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpponentHand* internal_default_instance() {
    return reinterpret_cast<const OpponentHand*>(
               &_OpponentHand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OpponentHand* other);
  friend void swap(OpponentHand& a, OpponentHand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpponentHand* New() const PROTOBUF_FINAL { return New(NULL); }

  OpponentHand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpponentHand& from);
  void MergeFrom(const OpponentHand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpponentHand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, double> losing_probability = 1;
  int losing_probability_size() const;
  void clear_losing_probability();
  static const int kLosingProbabilityFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, double >&
      losing_probability() const;
  ::google::protobuf::Map< ::google::protobuf::int32, double >*
      mutable_losing_probability();

  // @@protoc_insertion_point(class_scope:poker.OpponentHand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      OpponentHand_LosingProbabilityEntry_DoNotUse,
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > losing_probability_;
  mutable int _cached_size_;
  friend struct ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::TableStruct;
  friend void ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsOpponentHandImpl();
};
// -------------------------------------------------------------------

class PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse, 
    ::google::protobuf::int32, ::poker::OpponentHand,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse, 
    ::google::protobuf::int32, ::poker::OpponentHand,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse();
  PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse& other);
  static const PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse*>(&_PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PreflopHandGivenOponnentHand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PreflopHandGivenOponnentHand) */ {
 public:
  PreflopHandGivenOponnentHand();
  virtual ~PreflopHandGivenOponnentHand();

  PreflopHandGivenOponnentHand(const PreflopHandGivenOponnentHand& from);

  inline PreflopHandGivenOponnentHand& operator=(const PreflopHandGivenOponnentHand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreflopHandGivenOponnentHand(PreflopHandGivenOponnentHand&& from) noexcept
    : PreflopHandGivenOponnentHand() {
    *this = ::std::move(from);
  }

  inline PreflopHandGivenOponnentHand& operator=(PreflopHandGivenOponnentHand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreflopHandGivenOponnentHand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreflopHandGivenOponnentHand* internal_default_instance() {
    return reinterpret_cast<const PreflopHandGivenOponnentHand*>(
               &_PreflopHandGivenOponnentHand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PreflopHandGivenOponnentHand* other);
  friend void swap(PreflopHandGivenOponnentHand& a, PreflopHandGivenOponnentHand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreflopHandGivenOponnentHand* New() const PROTOBUF_FINAL { return New(NULL); }

  PreflopHandGivenOponnentHand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreflopHandGivenOponnentHand& from);
  void MergeFrom(const PreflopHandGivenOponnentHand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreflopHandGivenOponnentHand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .poker.OpponentHand> pre_flop_hand = 1;
  int pre_flop_hand_size() const;
  void clear_pre_flop_hand();
  static const int kPreFlopHandFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >&
      pre_flop_hand() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >*
      mutable_pre_flop_hand();

  // @@protoc_insertion_point(class_scope:poker.PreflopHandGivenOponnentHand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse,
      ::google::protobuf::int32, ::poker::OpponentHand,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > pre_flop_hand_;
  mutable int _cached_size_;
  friend struct ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::TableStruct;
  friend void ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsPreflopHandGivenOponnentHandImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OpponentHand

// map<int32, double> losing_probability = 1;
inline int OpponentHand::losing_probability_size() const {
  return losing_probability_.size();
}
inline void OpponentHand::clear_losing_probability() {
  losing_probability_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, double >&
OpponentHand::losing_probability() const {
  // @@protoc_insertion_point(field_map:poker.OpponentHand.losing_probability)
  return losing_probability_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, double >*
OpponentHand::mutable_losing_probability() {
  // @@protoc_insertion_point(field_mutable_map:poker.OpponentHand.losing_probability)
  return losing_probability_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PreflopHandGivenOponnentHand

// map<int32, .poker.OpponentHand> pre_flop_hand = 1;
inline int PreflopHandGivenOponnentHand::pre_flop_hand_size() const {
  return pre_flop_hand_.size();
}
inline void PreflopHandGivenOponnentHand::clear_pre_flop_hand() {
  pre_flop_hand_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >&
PreflopHandGivenOponnentHand::pre_flop_hand() const {
  // @@protoc_insertion_point(field_map:poker.PreflopHandGivenOponnentHand.pre_flop_hand)
  return pre_flop_hand_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >*
PreflopHandGivenOponnentHand::mutable_pre_flop_hand() {
  // @@protoc_insertion_point(field_mutable_map:poker.PreflopHandGivenOponnentHand.pre_flop_hand)
  return pre_flop_hand_.MutableMap();
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto__INCLUDED
