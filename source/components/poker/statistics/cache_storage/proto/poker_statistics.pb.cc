// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/poker/statistics/cache_storage/proto/poker_statistics.proto

#include "components/poker/statistics/cache_storage/proto/poker_statistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace poker {
class StatisticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Statistic>
      _instance;
} _Statistic_default_instance_;
class PreFlopStatistic_LosingProbabilityMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse>
      _instance;
} _PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse_default_instance_;
class PreFlopStatisticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreFlopStatistic>
      _instance;
} _PreFlopStatistic_default_instance_;
}  // namespace poker
namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto {
void InitDefaultsStatisticImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::poker::_Statistic_default_instance_;
    new (ptr) ::poker::Statistic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::Statistic::InitAsDefaultInstance();
}

void InitDefaultsStatistic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatisticImpl);
}

void InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsStatistic();
  {
    void* ptr = &::poker::_PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse_default_instance_;
    new (ptr) ::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse();
  }
  ::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUseImpl);
}

void InitDefaultsPreFlopStatisticImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUse();
  {
    void* ptr = &::poker::_PreFlopStatistic_default_instance_;
    new (ptr) ::poker::PreFlopStatistic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::PreFlopStatistic::InitAsDefaultInstance();
}

void InitDefaultsPreFlopStatistic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPreFlopStatisticImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::Statistic, losing_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::Statistic, tie_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic, losing_probability_map_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::poker::Statistic)},
  { 7, 14, sizeof(::poker::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse)},
  { 16, -1, sizeof(::poker::PreFlopStatistic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_Statistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PreFlopStatistic_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "components/poker/statistics/cache_storage/proto/poker_statistics.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nFcomponents/poker/statistics/cache_stor"
      "age/proto/poker_statistics.proto\022\005poker\""
      "@\n\tStatistic\022\032\n\022losing_probability\030\001 \001(\001"
      "\022\027\n\017tie_probability\030\002 \001(\001\"\264\001\n\020PreFlopSta"
      "tistic\022Q\n\026losing_probability_map\030\001 \003(\01321"
      ".poker.PreFlopStatistic.LosingProbabilit"
      "yMapEntry\032M\n\031LosingProbabilityMapEntry\022\013"
      "\n\003key\030\001 \001(\004\022\037\n\005value\030\002 \001(\0132\020.poker.Stati"
      "stic:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "components/poker/statistics/cache_storage/proto/poker_statistics.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto
namespace poker {

// ===================================================================

void Statistic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statistic::kLosingProbabilityFieldNumber;
const int Statistic::kTieProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statistic::Statistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsStatistic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&losing_probability_, &from.losing_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&tie_probability_) -
    reinterpret_cast<char*>(&losing_probability_)) + sizeof(tie_probability_));
  // @@protoc_insertion_point(copy_constructor:poker.Statistic)
}

void Statistic::SharedCtor() {
  ::memset(&losing_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tie_probability_) -
      reinterpret_cast<char*>(&losing_probability_)) + sizeof(tie_probability_));
  _cached_size_ = 0;
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:poker.Statistic)
  SharedDtor();
}

void Statistic::SharedDtor() {
}

void Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistic::descriptor() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Statistic& Statistic::default_instance() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsStatistic();
  return *internal_default_instance();
}

Statistic* Statistic::New(::google::protobuf::Arena* arena) const {
  Statistic* n = new Statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&losing_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tie_probability_) -
      reinterpret_cast<char*>(&losing_probability_)) + sizeof(tie_probability_));
  _internal_metadata_.Clear();
}

bool Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.Statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double losing_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &losing_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tie_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tie_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.Statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.Statistic)
  return false;
#undef DO_
}

void Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double losing_probability = 1;
  if (this->losing_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->losing_probability(), output);
  }

  // double tie_probability = 2;
  if (this->tie_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tie_probability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.Statistic)
}

::google::protobuf::uint8* Statistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double losing_probability = 1;
  if (this->losing_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->losing_probability(), target);
  }

  // double tie_probability = 2;
  if (this->tie_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tie_probability(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.Statistic)
  return target;
}

size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.Statistic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double losing_probability = 1;
  if (this->losing_probability() != 0) {
    total_size += 1 + 8;
  }

  // double tie_probability = 2;
  if (this->tie_probability() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Statistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.Statistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.Statistic)
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.losing_probability() != 0) {
    set_losing_probability(from.losing_probability());
  }
  if (from.tie_probability() != 0) {
    set_tie_probability(from.tie_probability());
  }
}

void Statistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::Swap(Statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  swap(losing_probability_, other->losing_probability_);
  swap(tie_probability_, other->tie_probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Statistic::GetMetadata() const {
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse() {}
PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::MergeFrom(const PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::file_level_metadata[1];
}
void PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PreFlopStatistic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreFlopStatistic::kLosingProbabilityMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreFlopStatistic::PreFlopStatistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatistic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.PreFlopStatistic)
}
PreFlopStatistic::PreFlopStatistic(const PreFlopStatistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  losing_probability_map_.MergeFrom(from.losing_probability_map_);
  // @@protoc_insertion_point(copy_constructor:poker.PreFlopStatistic)
}

void PreFlopStatistic::SharedCtor() {
  _cached_size_ = 0;
}

PreFlopStatistic::~PreFlopStatistic() {
  // @@protoc_insertion_point(destructor:poker.PreFlopStatistic)
  SharedDtor();
}

void PreFlopStatistic::SharedDtor() {
}

void PreFlopStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreFlopStatistic::descriptor() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreFlopStatistic& PreFlopStatistic::default_instance() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatistic();
  return *internal_default_instance();
}

PreFlopStatistic* PreFlopStatistic::New(::google::protobuf::Arena* arena) const {
  PreFlopStatistic* n = new PreFlopStatistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreFlopStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.PreFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  losing_probability_map_.Clear();
  _internal_metadata_.Clear();
}

bool PreFlopStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.PreFlopStatistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint64, .poker.Statistic> losing_probability_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse,
              ::google::protobuf::uint64, ::poker::Statistic,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic > > parser(&losing_probability_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.PreFlopStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.PreFlopStatistic)
  return false;
#undef DO_
}

void PreFlopStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.PreFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .poker.Statistic> losing_probability_map = 1;
  if (!this->losing_probability_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->losing_probability_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->losing_probability_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_iterator
          it = this->losing_probability_map().begin();
          it != this->losing_probability_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(losing_probability_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_iterator
          it = this->losing_probability_map().begin();
          it != this->losing_probability_map().end(); ++it) {
        entry.reset(losing_probability_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.PreFlopStatistic)
}

::google::protobuf::uint8* PreFlopStatistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.PreFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .poker.Statistic> losing_probability_map = 1;
  if (!this->losing_probability_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->losing_probability_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->losing_probability_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_iterator
          it = this->losing_probability_map().begin();
          it != this->losing_probability_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(losing_probability_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_iterator
          it = this->losing_probability_map().begin();
          it != this->losing_probability_map().end(); ++it) {
        entry.reset(losing_probability_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.PreFlopStatistic)
  return target;
}

size_t PreFlopStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.PreFlopStatistic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .poker.Statistic> losing_probability_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->losing_probability_map_size());
  {
    ::google::protobuf::scoped_ptr<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >::const_iterator
        it = this->losing_probability_map().begin();
        it != this->losing_probability_map().end(); ++it) {
      entry.reset(losing_probability_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreFlopStatistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.PreFlopStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const PreFlopStatistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreFlopStatistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.PreFlopStatistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.PreFlopStatistic)
    MergeFrom(*source);
  }
}

void PreFlopStatistic::MergeFrom(const PreFlopStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.PreFlopStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  losing_probability_map_.MergeFrom(from.losing_probability_map_);
}

void PreFlopStatistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.PreFlopStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreFlopStatistic::CopyFrom(const PreFlopStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.PreFlopStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreFlopStatistic::IsInitialized() const {
  return true;
}

void PreFlopStatistic::Swap(PreFlopStatistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreFlopStatistic::InternalSwap(PreFlopStatistic* other) {
  using std::swap;
  losing_probability_map_.Swap(&other->losing_probability_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreFlopStatistic::GetMetadata() const {
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poker

// @@protoc_insertion_point(global_scope)
