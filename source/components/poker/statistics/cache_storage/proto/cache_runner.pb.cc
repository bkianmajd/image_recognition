// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/poker/statistics/cache_storage/proto/cache_runner.proto

#include "components/poker/statistics/cache_storage/proto/cache_runner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace poker {
class OpponentHand_LosingProbabilityEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpponentHand_LosingProbabilityEntry_DoNotUse>
      _instance;
} _OpponentHand_LosingProbabilityEntry_DoNotUse_default_instance_;
class OpponentHandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpponentHand>
      _instance;
} _OpponentHand_default_instance_;
class PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse>
      _instance;
} _PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse_default_instance_;
class PreflopHandGivenOponnentHandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreflopHandGivenOponnentHand>
      _instance;
} _PreflopHandGivenOponnentHand_default_instance_;
}  // namespace poker
namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto {
void InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::poker::_OpponentHand_LosingProbabilityEntry_DoNotUse_default_instance_;
    new (ptr) ::poker::OpponentHand_LosingProbabilityEntry_DoNotUse();
  }
  ::poker::OpponentHand_LosingProbabilityEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUseImpl);
}

void InitDefaultsOpponentHandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsOpponentHand_LosingProbabilityEntry_DoNotUse();
  {
    void* ptr = &::poker::_OpponentHand_default_instance_;
    new (ptr) ::poker::OpponentHand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::OpponentHand::InitAsDefaultInstance();
}

void InitDefaultsOpponentHand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpponentHandImpl);
}

void InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsOpponentHand();
  {
    void* ptr = &::poker::_PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse_default_instance_;
    new (ptr) ::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse();
  }
  ::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUseImpl);
}

void InitDefaultsPreflopHandGivenOponnentHandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsPreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse();
  {
    void* ptr = &::poker::_PreflopHandGivenOponnentHand_default_instance_;
    new (ptr) ::poker::PreflopHandGivenOponnentHand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::PreflopHandGivenOponnentHand::InitAsDefaultInstance();
}

void InitDefaultsPreflopHandGivenOponnentHand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPreflopHandGivenOponnentHandImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::OpponentHand_LosingProbabilityEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::OpponentHand_LosingProbabilityEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::OpponentHand_LosingProbabilityEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::OpponentHand_LosingProbabilityEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::OpponentHand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::OpponentHand, losing_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopHandGivenOponnentHand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopHandGivenOponnentHand, pre_flop_hand_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::poker::OpponentHand_LosingProbabilityEntry_DoNotUse)},
  { 9, -1, sizeof(::poker::OpponentHand)},
  { 15, 22, sizeof(::poker::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse)},
  { 24, -1, sizeof(::poker::PreflopHandGivenOponnentHand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_OpponentHand_LosingProbabilityEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_OpponentHand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PreflopHandGivenOponnentHand_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "components/poker/statistics/cache_storage/proto/cache_runner.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nBcomponents/poker/statistics/cache_stor"
      "age/proto/cache_runner.proto\022\005poker\"\220\001\n\014"
      "OpponentHand\022F\n\022losing_probability\030\001 \003(\013"
      "2*.poker.OpponentHand.LosingProbabilityE"
      "ntry\0328\n\026LosingProbabilityEntry\022\013\n\003key\030\001 "
      "\001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\"\264\001\n\034PreflopHandGi"
      "venOponnentHand\022K\n\rpre_flop_hand\030\001 \003(\01324"
      ".poker.PreflopHandGivenOponnentHand.PreF"
      "lopHandEntry\032G\n\020PreFlopHandEntry\022\013\n\003key\030"
      "\001 \001(\005\022\"\n\005value\030\002 \001(\0132\023.poker.OpponentHan"
      "d:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "components/poker/statistics/cache_storage/proto/cache_runner.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto
namespace poker {

// ===================================================================

OpponentHand_LosingProbabilityEntry_DoNotUse::OpponentHand_LosingProbabilityEntry_DoNotUse() {}
OpponentHand_LosingProbabilityEntry_DoNotUse::OpponentHand_LosingProbabilityEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void OpponentHand_LosingProbabilityEntry_DoNotUse::MergeFrom(const OpponentHand_LosingProbabilityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata OpponentHand_LosingProbabilityEntry_DoNotUse::GetMetadata() const {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::file_level_metadata[0];
}
void OpponentHand_LosingProbabilityEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void OpponentHand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpponentHand::kLosingProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpponentHand::OpponentHand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsOpponentHand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.OpponentHand)
}
OpponentHand::OpponentHand(const OpponentHand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  losing_probability_.MergeFrom(from.losing_probability_);
  // @@protoc_insertion_point(copy_constructor:poker.OpponentHand)
}

void OpponentHand::SharedCtor() {
  _cached_size_ = 0;
}

OpponentHand::~OpponentHand() {
  // @@protoc_insertion_point(destructor:poker.OpponentHand)
  SharedDtor();
}

void OpponentHand::SharedDtor() {
}

void OpponentHand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpponentHand::descriptor() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpponentHand& OpponentHand::default_instance() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsOpponentHand();
  return *internal_default_instance();
}

OpponentHand* OpponentHand::New(::google::protobuf::Arena* arena) const {
  OpponentHand* n = new OpponentHand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpponentHand::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.OpponentHand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  losing_probability_.Clear();
  _internal_metadata_.Clear();
}

bool OpponentHand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.OpponentHand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, double> losing_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          OpponentHand_LosingProbabilityEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              OpponentHand_LosingProbabilityEntry_DoNotUse,
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&losing_probability_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.OpponentHand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.OpponentHand)
  return false;
#undef DO_
}

void OpponentHand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.OpponentHand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, double> losing_probability = 1;
  if (!this->losing_probability().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->losing_probability().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->losing_probability().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->losing_probability().begin();
          it != this->losing_probability().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OpponentHand_LosingProbabilityEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(losing_probability_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpponentHand_LosingProbabilityEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->losing_probability().begin();
          it != this->losing_probability().end(); ++it) {
        entry.reset(losing_probability_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.OpponentHand)
}

::google::protobuf::uint8* OpponentHand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.OpponentHand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, double> losing_probability = 1;
  if (!this->losing_probability().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->losing_probability().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->losing_probability().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->losing_probability().begin();
          it != this->losing_probability().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OpponentHand_LosingProbabilityEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(losing_probability_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<OpponentHand_LosingProbabilityEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->losing_probability().begin();
          it != this->losing_probability().end(); ++it) {
        entry.reset(losing_probability_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.OpponentHand)
  return target;
}

size_t OpponentHand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.OpponentHand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, double> losing_probability = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->losing_probability_size());
  {
    ::google::protobuf::scoped_ptr<OpponentHand_LosingProbabilityEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->losing_probability().begin();
        it != this->losing_probability().end(); ++it) {
      entry.reset(losing_probability_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpponentHand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.OpponentHand)
  GOOGLE_DCHECK_NE(&from, this);
  const OpponentHand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpponentHand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.OpponentHand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.OpponentHand)
    MergeFrom(*source);
  }
}

void OpponentHand::MergeFrom(const OpponentHand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.OpponentHand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  losing_probability_.MergeFrom(from.losing_probability_);
}

void OpponentHand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.OpponentHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpponentHand::CopyFrom(const OpponentHand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.OpponentHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpponentHand::IsInitialized() const {
  return true;
}

void OpponentHand::Swap(OpponentHand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpponentHand::InternalSwap(OpponentHand* other) {
  using std::swap;
  losing_probability_.Swap(&other->losing_probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpponentHand::GetMetadata() const {
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse() {}
PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::MergeFrom(const PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::GetMetadata() const {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::file_level_metadata[2];
}
void PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PreflopHandGivenOponnentHand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreflopHandGivenOponnentHand::kPreFlopHandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreflopHandGivenOponnentHand::PreflopHandGivenOponnentHand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsPreflopHandGivenOponnentHand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.PreflopHandGivenOponnentHand)
}
PreflopHandGivenOponnentHand::PreflopHandGivenOponnentHand(const PreflopHandGivenOponnentHand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pre_flop_hand_.MergeFrom(from.pre_flop_hand_);
  // @@protoc_insertion_point(copy_constructor:poker.PreflopHandGivenOponnentHand)
}

void PreflopHandGivenOponnentHand::SharedCtor() {
  _cached_size_ = 0;
}

PreflopHandGivenOponnentHand::~PreflopHandGivenOponnentHand() {
  // @@protoc_insertion_point(destructor:poker.PreflopHandGivenOponnentHand)
  SharedDtor();
}

void PreflopHandGivenOponnentHand::SharedDtor() {
}

void PreflopHandGivenOponnentHand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreflopHandGivenOponnentHand::descriptor() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreflopHandGivenOponnentHand& PreflopHandGivenOponnentHand::default_instance() {
  ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::InitDefaultsPreflopHandGivenOponnentHand();
  return *internal_default_instance();
}

PreflopHandGivenOponnentHand* PreflopHandGivenOponnentHand::New(::google::protobuf::Arena* arena) const {
  PreflopHandGivenOponnentHand* n = new PreflopHandGivenOponnentHand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreflopHandGivenOponnentHand::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.PreflopHandGivenOponnentHand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_flop_hand_.Clear();
  _internal_metadata_.Clear();
}

bool PreflopHandGivenOponnentHand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.PreflopHandGivenOponnentHand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .poker.OpponentHand> pre_flop_hand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse,
              ::google::protobuf::int32, ::poker::OpponentHand,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand > > parser(&pre_flop_hand_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.PreflopHandGivenOponnentHand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.PreflopHandGivenOponnentHand)
  return false;
#undef DO_
}

void PreflopHandGivenOponnentHand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.PreflopHandGivenOponnentHand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .poker.OpponentHand> pre_flop_hand = 1;
  if (!this->pre_flop_hand().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->pre_flop_hand().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->pre_flop_hand().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_iterator
          it = this->pre_flop_hand().begin();
          it != this->pre_flop_hand().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(pre_flop_hand_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_iterator
          it = this->pre_flop_hand().begin();
          it != this->pre_flop_hand().end(); ++it) {
        entry.reset(pre_flop_hand_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.PreflopHandGivenOponnentHand)
}

::google::protobuf::uint8* PreflopHandGivenOponnentHand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.PreflopHandGivenOponnentHand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .poker.OpponentHand> pre_flop_hand = 1;
  if (!this->pre_flop_hand().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->pre_flop_hand().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->pre_flop_hand().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_iterator
          it = this->pre_flop_hand().begin();
          it != this->pre_flop_hand().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(pre_flop_hand_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_iterator
          it = this->pre_flop_hand().begin();
          it != this->pre_flop_hand().end(); ++it) {
        entry.reset(pre_flop_hand_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.PreflopHandGivenOponnentHand)
  return target;
}

size_t PreflopHandGivenOponnentHand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.PreflopHandGivenOponnentHand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .poker.OpponentHand> pre_flop_hand = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pre_flop_hand_size());
  {
    ::google::protobuf::scoped_ptr<PreflopHandGivenOponnentHand_PreFlopHandEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::poker::OpponentHand >::const_iterator
        it = this->pre_flop_hand().begin();
        it != this->pre_flop_hand().end(); ++it) {
      entry.reset(pre_flop_hand_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreflopHandGivenOponnentHand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.PreflopHandGivenOponnentHand)
  GOOGLE_DCHECK_NE(&from, this);
  const PreflopHandGivenOponnentHand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreflopHandGivenOponnentHand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.PreflopHandGivenOponnentHand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.PreflopHandGivenOponnentHand)
    MergeFrom(*source);
  }
}

void PreflopHandGivenOponnentHand::MergeFrom(const PreflopHandGivenOponnentHand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.PreflopHandGivenOponnentHand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pre_flop_hand_.MergeFrom(from.pre_flop_hand_);
}

void PreflopHandGivenOponnentHand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.PreflopHandGivenOponnentHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreflopHandGivenOponnentHand::CopyFrom(const PreflopHandGivenOponnentHand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.PreflopHandGivenOponnentHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreflopHandGivenOponnentHand::IsInitialized() const {
  return true;
}

void PreflopHandGivenOponnentHand::Swap(PreflopHandGivenOponnentHand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreflopHandGivenOponnentHand::InternalSwap(PreflopHandGivenOponnentHand* other) {
  using std::swap;
  pre_flop_hand_.Swap(&other->pre_flop_hand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreflopHandGivenOponnentHand::GetMetadata() const {
  protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fcache_5frunner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poker

// @@protoc_insertion_point(global_scope)
