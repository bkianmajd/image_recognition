// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/poker/statistics/cache_storage/proto/poker_statistics.proto

#ifndef PROTOBUF_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto__INCLUDED
#define PROTOBUF_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStatisticImpl();
void InitDefaultsStatistic();
void InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUseImpl();
void InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUse();
void InitDefaultsPreFlopStatisticImpl();
void InitDefaultsPreFlopStatistic();
inline void InitDefaults() {
  InitDefaultsStatistic();
  InitDefaultsPreFlopStatistic_LosingProbabilityMapEntry_DoNotUse();
  InitDefaultsPreFlopStatistic();
}
}  // namespace protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto
namespace poker {
class PreFlopStatistic;
class PreFlopStatisticDefaultTypeInternal;
extern PreFlopStatisticDefaultTypeInternal _PreFlopStatistic_default_instance_;
class PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse;
class PreFlopStatistic_LosingProbabilityMapEntry_DoNotUseDefaultTypeInternal;
extern PreFlopStatistic_LosingProbabilityMapEntry_DoNotUseDefaultTypeInternal _PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse_default_instance_;
class Statistic;
class StatisticDefaultTypeInternal;
extern StatisticDefaultTypeInternal _Statistic_default_instance_;
}  // namespace poker
namespace poker {

// ===================================================================

class Statistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.Statistic) */ {
 public:
  Statistic();
  virtual ~Statistic();

  Statistic(const Statistic& from);

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Statistic(Statistic&& from) noexcept
    : Statistic() {
    *this = ::std::move(from);
  }

  inline Statistic& operator=(Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Statistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistic* internal_default_instance() {
    return reinterpret_cast<const Statistic*>(
               &_Statistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Statistic* other);
  friend void swap(Statistic& a, Statistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Statistic* New() const PROTOBUF_FINAL { return New(NULL); }

  Statistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Statistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double losing_probability = 1;
  void clear_losing_probability();
  static const int kLosingProbabilityFieldNumber = 1;
  double losing_probability() const;
  void set_losing_probability(double value);

  // double tie_probability = 2;
  void clear_tie_probability();
  static const int kTieProbabilityFieldNumber = 2;
  double tie_probability() const;
  void set_tie_probability(double value);

  // @@protoc_insertion_point(class_scope:poker.Statistic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double losing_probability_;
  double tie_probability_;
  mutable int _cached_size_;
  friend struct ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsStatisticImpl();
};
// -------------------------------------------------------------------

class PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse, 
    ::google::protobuf::uint64, ::poker::Statistic,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse, 
    ::google::protobuf::uint64, ::poker::Statistic,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse();
  PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse& other);
  static const PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse*>(&_PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PreFlopStatistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PreFlopStatistic) */ {
 public:
  PreFlopStatistic();
  virtual ~PreFlopStatistic();

  PreFlopStatistic(const PreFlopStatistic& from);

  inline PreFlopStatistic& operator=(const PreFlopStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreFlopStatistic(PreFlopStatistic&& from) noexcept
    : PreFlopStatistic() {
    *this = ::std::move(from);
  }

  inline PreFlopStatistic& operator=(PreFlopStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreFlopStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreFlopStatistic* internal_default_instance() {
    return reinterpret_cast<const PreFlopStatistic*>(
               &_PreFlopStatistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PreFlopStatistic* other);
  friend void swap(PreFlopStatistic& a, PreFlopStatistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreFlopStatistic* New() const PROTOBUF_FINAL { return New(NULL); }

  PreFlopStatistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreFlopStatistic& from);
  void MergeFrom(const PreFlopStatistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreFlopStatistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, .poker.Statistic> losing_probability_map = 1;
  int losing_probability_map_size() const;
  void clear_losing_probability_map();
  static const int kLosingProbabilityMapFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >&
      losing_probability_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >*
      mutable_losing_probability_map();

  // @@protoc_insertion_point(class_scope:poker.PreFlopStatistic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PreFlopStatistic_LosingProbabilityMapEntry_DoNotUse,
      ::google::protobuf::uint64, ::poker::Statistic,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > losing_probability_map_;
  mutable int _cached_size_;
  friend struct ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatisticImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Statistic

// double losing_probability = 1;
inline void Statistic::clear_losing_probability() {
  losing_probability_ = 0;
}
inline double Statistic::losing_probability() const {
  // @@protoc_insertion_point(field_get:poker.Statistic.losing_probability)
  return losing_probability_;
}
inline void Statistic::set_losing_probability(double value) {
  
  losing_probability_ = value;
  // @@protoc_insertion_point(field_set:poker.Statistic.losing_probability)
}

// double tie_probability = 2;
inline void Statistic::clear_tie_probability() {
  tie_probability_ = 0;
}
inline double Statistic::tie_probability() const {
  // @@protoc_insertion_point(field_get:poker.Statistic.tie_probability)
  return tie_probability_;
}
inline void Statistic::set_tie_probability(double value) {
  
  tie_probability_ = value;
  // @@protoc_insertion_point(field_set:poker.Statistic.tie_probability)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PreFlopStatistic

// map<uint64, .poker.Statistic> losing_probability_map = 1;
inline int PreFlopStatistic::losing_probability_map_size() const {
  return losing_probability_map_.size();
}
inline void PreFlopStatistic::clear_losing_probability_map() {
  losing_probability_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >&
PreFlopStatistic::losing_probability_map() const {
  // @@protoc_insertion_point(field_map:poker.PreFlopStatistic.losing_probability_map)
  return losing_probability_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, ::poker::Statistic >*
PreFlopStatistic::mutable_losing_probability_map() {
  // @@protoc_insertion_point(field_mutable_map:poker.PreFlopStatistic.losing_probability_map)
  return losing_probability_map_.MutableMap();
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_components_2fpoker_2fstatistics_2fcache_5fstorage_2fproto_2fpoker_5fstatistics_2eproto__INCLUDED
