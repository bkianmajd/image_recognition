// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/poker_statistics.proto

#include "proto/poker_statistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace poker {
class PreFlopStatisticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreFlopStatistic>
      _instance;
} _PreFlopStatistic_default_instance_;
class PreflopStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreflopStatistics>
      _instance;
} _PreflopStatistics_default_instance_;
class PostFlopStatisticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PostFlopStatistic>
      _instance;
} _PostFlopStatistic_default_instance_;
class PostFlopStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PostFlopStatistics>
      _instance;
} _PostFlopStatistics_default_instance_;
}  // namespace poker
namespace protobuf_proto_2fpoker_5fstatistics_2eproto {
void InitDefaultsPreFlopStatisticImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::poker::_PreFlopStatistic_default_instance_;
    new (ptr) ::poker::PreFlopStatistic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::PreFlopStatistic::InitAsDefaultInstance();
}

void InitDefaultsPreFlopStatistic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPreFlopStatisticImpl);
}

void InitDefaultsPreflopStatisticsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatistic();
  {
    void* ptr = &::poker::_PreflopStatistics_default_instance_;
    new (ptr) ::poker::PreflopStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::PreflopStatistics::InitAsDefaultInstance();
}

void InitDefaultsPreflopStatistics() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPreflopStatisticsImpl);
}

void InitDefaultsPostFlopStatisticImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::poker::_PostFlopStatistic_default_instance_;
    new (ptr) ::poker::PostFlopStatistic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::PostFlopStatistic::InitAsDefaultInstance();
}

void InitDefaultsPostFlopStatistic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPostFlopStatisticImpl);
}

void InitDefaultsPostFlopStatisticsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatistic();
  {
    void* ptr = &::poker::_PostFlopStatistics_default_instance_;
    new (ptr) ::poker::PostFlopStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poker::PostFlopStatistics::InitAsDefaultInstance();
}

void InitDefaultsPostFlopStatistics() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPostFlopStatisticsImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic, hand_sorted_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreFlopStatistic, losing_probability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PreflopStatistics, preflop_statistics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PostFlopStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PostFlopStatistic, hand_table_unique_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PostFlopStatistic, losing_probability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PostFlopStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::poker::PostFlopStatistics, post_flop_statistics_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::poker::PreFlopStatistic)},
  { 7, -1, sizeof(::poker::PreflopStatistics)},
  { 13, -1, sizeof(::poker::PostFlopStatistic)},
  { 20, -1, sizeof(::poker::PostFlopStatistics)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PreFlopStatistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PreflopStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PostFlopStatistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::poker::_PostFlopStatistics_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/poker_statistics.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034proto/poker_statistics.proto\022\005poker\"F\n"
      "\020PreFlopStatistic\022\026\n\016hand_sorted_id\030\001 \001("
      "\005\022\032\n\022losing_probability\030\003 \001(\001\"H\n\021Preflop"
      "Statistics\0223\n\022preflop_statistics\030\001 \003(\0132\027"
      ".poker.PreFlopStatistic\"M\n\021PostFlopStati"
      "stic\022\034\n\024hand_table_unique_id\030\002 \001(\003\022\032\n\022lo"
      "sing_probability\030\003 \001(\001\"L\n\022PostFlopStatis"
      "tics\0226\n\024post_flop_statistics\030\001 \003(\0132\030.pok"
      "er.PostFlopStatisticb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/poker_statistics.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fpoker_5fstatistics_2eproto
namespace poker {

// ===================================================================

void PreFlopStatistic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreFlopStatistic::kHandSortedIdFieldNumber;
const int PreFlopStatistic::kLosingProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreFlopStatistic::PreFlopStatistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatistic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.PreFlopStatistic)
}
PreFlopStatistic::PreFlopStatistic(const PreFlopStatistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&losing_probability_, &from.losing_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_sorted_id_) -
    reinterpret_cast<char*>(&losing_probability_)) + sizeof(hand_sorted_id_));
  // @@protoc_insertion_point(copy_constructor:poker.PreFlopStatistic)
}

void PreFlopStatistic::SharedCtor() {
  ::memset(&losing_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_sorted_id_) -
      reinterpret_cast<char*>(&losing_probability_)) + sizeof(hand_sorted_id_));
  _cached_size_ = 0;
}

PreFlopStatistic::~PreFlopStatistic() {
  // @@protoc_insertion_point(destructor:poker.PreFlopStatistic)
  SharedDtor();
}

void PreFlopStatistic::SharedDtor() {
}

void PreFlopStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreFlopStatistic::descriptor() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreFlopStatistic& PreFlopStatistic::default_instance() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatistic();
  return *internal_default_instance();
}

PreFlopStatistic* PreFlopStatistic::New(::google::protobuf::Arena* arena) const {
  PreFlopStatistic* n = new PreFlopStatistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreFlopStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.PreFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&losing_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_sorted_id_) -
      reinterpret_cast<char*>(&losing_probability_)) + sizeof(hand_sorted_id_));
  _internal_metadata_.Clear();
}

bool PreFlopStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.PreFlopStatistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hand_sorted_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_sorted_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double losing_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &losing_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.PreFlopStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.PreFlopStatistic)
  return false;
#undef DO_
}

void PreFlopStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.PreFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hand_sorted_id = 1;
  if (this->hand_sorted_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_sorted_id(), output);
  }

  // double losing_probability = 3;
  if (this->losing_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->losing_probability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.PreFlopStatistic)
}

::google::protobuf::uint8* PreFlopStatistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.PreFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hand_sorted_id = 1;
  if (this->hand_sorted_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_sorted_id(), target);
  }

  // double losing_probability = 3;
  if (this->losing_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->losing_probability(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.PreFlopStatistic)
  return target;
}

size_t PreFlopStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.PreFlopStatistic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double losing_probability = 3;
  if (this->losing_probability() != 0) {
    total_size += 1 + 8;
  }

  // int32 hand_sorted_id = 1;
  if (this->hand_sorted_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hand_sorted_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreFlopStatistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.PreFlopStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const PreFlopStatistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreFlopStatistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.PreFlopStatistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.PreFlopStatistic)
    MergeFrom(*source);
  }
}

void PreFlopStatistic::MergeFrom(const PreFlopStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.PreFlopStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.losing_probability() != 0) {
    set_losing_probability(from.losing_probability());
  }
  if (from.hand_sorted_id() != 0) {
    set_hand_sorted_id(from.hand_sorted_id());
  }
}

void PreFlopStatistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.PreFlopStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreFlopStatistic::CopyFrom(const PreFlopStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.PreFlopStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreFlopStatistic::IsInitialized() const {
  return true;
}

void PreFlopStatistic::Swap(PreFlopStatistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreFlopStatistic::InternalSwap(PreFlopStatistic* other) {
  using std::swap;
  swap(losing_probability_, other->losing_probability_);
  swap(hand_sorted_id_, other->hand_sorted_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreFlopStatistic::GetMetadata() const {
  protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PreflopStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreflopStatistics::kPreflopStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreflopStatistics::PreflopStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreflopStatistics();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.PreflopStatistics)
}
PreflopStatistics::PreflopStatistics(const PreflopStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      preflop_statistics_(from.preflop_statistics_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:poker.PreflopStatistics)
}

void PreflopStatistics::SharedCtor() {
  _cached_size_ = 0;
}

PreflopStatistics::~PreflopStatistics() {
  // @@protoc_insertion_point(destructor:poker.PreflopStatistics)
  SharedDtor();
}

void PreflopStatistics::SharedDtor() {
}

void PreflopStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreflopStatistics::descriptor() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreflopStatistics& PreflopStatistics::default_instance() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreflopStatistics();
  return *internal_default_instance();
}

PreflopStatistics* PreflopStatistics::New(::google::protobuf::Arena* arena) const {
  PreflopStatistics* n = new PreflopStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreflopStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.PreflopStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preflop_statistics_.Clear();
  _internal_metadata_.Clear();
}

bool PreflopStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.PreflopStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .poker.PreFlopStatistic preflop_statistics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_preflop_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.PreflopStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.PreflopStatistics)
  return false;
#undef DO_
}

void PreflopStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.PreflopStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .poker.PreFlopStatistic preflop_statistics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->preflop_statistics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preflop_statistics(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.PreflopStatistics)
}

::google::protobuf::uint8* PreflopStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.PreflopStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .poker.PreFlopStatistic preflop_statistics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->preflop_statistics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->preflop_statistics(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.PreflopStatistics)
  return target;
}

size_t PreflopStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.PreflopStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .poker.PreFlopStatistic preflop_statistics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->preflop_statistics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->preflop_statistics(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreflopStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.PreflopStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const PreflopStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreflopStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.PreflopStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.PreflopStatistics)
    MergeFrom(*source);
  }
}

void PreflopStatistics::MergeFrom(const PreflopStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.PreflopStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preflop_statistics_.MergeFrom(from.preflop_statistics_);
}

void PreflopStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.PreflopStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreflopStatistics::CopyFrom(const PreflopStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.PreflopStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreflopStatistics::IsInitialized() const {
  return true;
}

void PreflopStatistics::Swap(PreflopStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreflopStatistics::InternalSwap(PreflopStatistics* other) {
  using std::swap;
  preflop_statistics_.InternalSwap(&other->preflop_statistics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreflopStatistics::GetMetadata() const {
  protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PostFlopStatistic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostFlopStatistic::kHandTableUniqueIdFieldNumber;
const int PostFlopStatistic::kLosingProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostFlopStatistic::PostFlopStatistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatistic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.PostFlopStatistic)
}
PostFlopStatistic::PostFlopStatistic(const PostFlopStatistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_table_unique_id_, &from.hand_table_unique_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&losing_probability_) -
    reinterpret_cast<char*>(&hand_table_unique_id_)) + sizeof(losing_probability_));
  // @@protoc_insertion_point(copy_constructor:poker.PostFlopStatistic)
}

void PostFlopStatistic::SharedCtor() {
  ::memset(&hand_table_unique_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&losing_probability_) -
      reinterpret_cast<char*>(&hand_table_unique_id_)) + sizeof(losing_probability_));
  _cached_size_ = 0;
}

PostFlopStatistic::~PostFlopStatistic() {
  // @@protoc_insertion_point(destructor:poker.PostFlopStatistic)
  SharedDtor();
}

void PostFlopStatistic::SharedDtor() {
}

void PostFlopStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostFlopStatistic::descriptor() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostFlopStatistic& PostFlopStatistic::default_instance() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatistic();
  return *internal_default_instance();
}

PostFlopStatistic* PostFlopStatistic::New(::google::protobuf::Arena* arena) const {
  PostFlopStatistic* n = new PostFlopStatistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostFlopStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.PostFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hand_table_unique_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&losing_probability_) -
      reinterpret_cast<char*>(&hand_table_unique_id_)) + sizeof(losing_probability_));
  _internal_metadata_.Clear();
}

bool PostFlopStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.PostFlopStatistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 hand_table_unique_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hand_table_unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double losing_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &losing_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.PostFlopStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.PostFlopStatistic)
  return false;
#undef DO_
}

void PostFlopStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.PostFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 hand_table_unique_id = 2;
  if (this->hand_table_unique_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hand_table_unique_id(), output);
  }

  // double losing_probability = 3;
  if (this->losing_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->losing_probability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.PostFlopStatistic)
}

::google::protobuf::uint8* PostFlopStatistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.PostFlopStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 hand_table_unique_id = 2;
  if (this->hand_table_unique_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hand_table_unique_id(), target);
  }

  // double losing_probability = 3;
  if (this->losing_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->losing_probability(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.PostFlopStatistic)
  return target;
}

size_t PostFlopStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.PostFlopStatistic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 hand_table_unique_id = 2;
  if (this->hand_table_unique_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hand_table_unique_id());
  }

  // double losing_probability = 3;
  if (this->losing_probability() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostFlopStatistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.PostFlopStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const PostFlopStatistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostFlopStatistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.PostFlopStatistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.PostFlopStatistic)
    MergeFrom(*source);
  }
}

void PostFlopStatistic::MergeFrom(const PostFlopStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.PostFlopStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hand_table_unique_id() != 0) {
    set_hand_table_unique_id(from.hand_table_unique_id());
  }
  if (from.losing_probability() != 0) {
    set_losing_probability(from.losing_probability());
  }
}

void PostFlopStatistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.PostFlopStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostFlopStatistic::CopyFrom(const PostFlopStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.PostFlopStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostFlopStatistic::IsInitialized() const {
  return true;
}

void PostFlopStatistic::Swap(PostFlopStatistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostFlopStatistic::InternalSwap(PostFlopStatistic* other) {
  using std::swap;
  swap(hand_table_unique_id_, other->hand_table_unique_id_);
  swap(losing_probability_, other->losing_probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostFlopStatistic::GetMetadata() const {
  protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PostFlopStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostFlopStatistics::kPostFlopStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostFlopStatistics::PostFlopStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatistics();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:poker.PostFlopStatistics)
}
PostFlopStatistics::PostFlopStatistics(const PostFlopStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      post_flop_statistics_(from.post_flop_statistics_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:poker.PostFlopStatistics)
}

void PostFlopStatistics::SharedCtor() {
  _cached_size_ = 0;
}

PostFlopStatistics::~PostFlopStatistics() {
  // @@protoc_insertion_point(destructor:poker.PostFlopStatistics)
  SharedDtor();
}

void PostFlopStatistics::SharedDtor() {
}

void PostFlopStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostFlopStatistics::descriptor() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostFlopStatistics& PostFlopStatistics::default_instance() {
  ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatistics();
  return *internal_default_instance();
}

PostFlopStatistics* PostFlopStatistics::New(::google::protobuf::Arena* arena) const {
  PostFlopStatistics* n = new PostFlopStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostFlopStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:poker.PostFlopStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_flop_statistics_.Clear();
  _internal_metadata_.Clear();
}

bool PostFlopStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poker.PostFlopStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .poker.PostFlopStatistic post_flop_statistics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_post_flop_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poker.PostFlopStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poker.PostFlopStatistics)
  return false;
#undef DO_
}

void PostFlopStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poker.PostFlopStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .poker.PostFlopStatistic post_flop_statistics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_flop_statistics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->post_flop_statistics(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:poker.PostFlopStatistics)
}

::google::protobuf::uint8* PostFlopStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:poker.PostFlopStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .poker.PostFlopStatistic post_flop_statistics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_flop_statistics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->post_flop_statistics(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poker.PostFlopStatistics)
  return target;
}

size_t PostFlopStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poker.PostFlopStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .poker.PostFlopStatistic post_flop_statistics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->post_flop_statistics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->post_flop_statistics(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostFlopStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poker.PostFlopStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const PostFlopStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostFlopStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poker.PostFlopStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poker.PostFlopStatistics)
    MergeFrom(*source);
  }
}

void PostFlopStatistics::MergeFrom(const PostFlopStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poker.PostFlopStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  post_flop_statistics_.MergeFrom(from.post_flop_statistics_);
}

void PostFlopStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poker.PostFlopStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostFlopStatistics::CopyFrom(const PostFlopStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poker.PostFlopStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostFlopStatistics::IsInitialized() const {
  return true;
}

void PostFlopStatistics::Swap(PostFlopStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostFlopStatistics::InternalSwap(PostFlopStatistics* other) {
  using std::swap;
  post_flop_statistics_.InternalSwap(&other->post_flop_statistics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostFlopStatistics::GetMetadata() const {
  protobuf_proto_2fpoker_5fstatistics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fpoker_5fstatistics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poker

// @@protoc_insertion_point(global_scope)
