// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/poker_statistics.proto

#ifndef PROTOBUF_proto_2fpoker_5fstatistics_2eproto__INCLUDED
#define PROTOBUF_proto_2fpoker_5fstatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fpoker_5fstatistics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPreFlopStatisticImpl();
void InitDefaultsPreFlopStatistic();
void InitDefaultsPreflopStatisticsImpl();
void InitDefaultsPreflopStatistics();
void InitDefaultsPostFlopStatisticImpl();
void InitDefaultsPostFlopStatistic();
void InitDefaultsPostFlopStatisticsImpl();
void InitDefaultsPostFlopStatistics();
inline void InitDefaults() {
  InitDefaultsPreFlopStatistic();
  InitDefaultsPreflopStatistics();
  InitDefaultsPostFlopStatistic();
  InitDefaultsPostFlopStatistics();
}
}  // namespace protobuf_proto_2fpoker_5fstatistics_2eproto
namespace poker {
class PostFlopStatistic;
class PostFlopStatisticDefaultTypeInternal;
extern PostFlopStatisticDefaultTypeInternal _PostFlopStatistic_default_instance_;
class PostFlopStatistics;
class PostFlopStatisticsDefaultTypeInternal;
extern PostFlopStatisticsDefaultTypeInternal _PostFlopStatistics_default_instance_;
class PreFlopStatistic;
class PreFlopStatisticDefaultTypeInternal;
extern PreFlopStatisticDefaultTypeInternal _PreFlopStatistic_default_instance_;
class PreflopStatistics;
class PreflopStatisticsDefaultTypeInternal;
extern PreflopStatisticsDefaultTypeInternal _PreflopStatistics_default_instance_;
}  // namespace poker
namespace poker {

// ===================================================================

class PreFlopStatistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PreFlopStatistic) */ {
 public:
  PreFlopStatistic();
  virtual ~PreFlopStatistic();

  PreFlopStatistic(const PreFlopStatistic& from);

  inline PreFlopStatistic& operator=(const PreFlopStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreFlopStatistic(PreFlopStatistic&& from) noexcept
    : PreFlopStatistic() {
    *this = ::std::move(from);
  }

  inline PreFlopStatistic& operator=(PreFlopStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreFlopStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreFlopStatistic* internal_default_instance() {
    return reinterpret_cast<const PreFlopStatistic*>(
               &_PreFlopStatistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PreFlopStatistic* other);
  friend void swap(PreFlopStatistic& a, PreFlopStatistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreFlopStatistic* New() const PROTOBUF_FINAL { return New(NULL); }

  PreFlopStatistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreFlopStatistic& from);
  void MergeFrom(const PreFlopStatistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreFlopStatistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double losing_probability = 3;
  void clear_losing_probability();
  static const int kLosingProbabilityFieldNumber = 3;
  double losing_probability() const;
  void set_losing_probability(double value);

  // int32 hand_sorted_id = 1;
  void clear_hand_sorted_id();
  static const int kHandSortedIdFieldNumber = 1;
  ::google::protobuf::int32 hand_sorted_id() const;
  void set_hand_sorted_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:poker.PreFlopStatistic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double losing_probability_;
  ::google::protobuf::int32 hand_sorted_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fpoker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreFlopStatisticImpl();
};
// -------------------------------------------------------------------

class PreflopStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PreflopStatistics) */ {
 public:
  PreflopStatistics();
  virtual ~PreflopStatistics();

  PreflopStatistics(const PreflopStatistics& from);

  inline PreflopStatistics& operator=(const PreflopStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreflopStatistics(PreflopStatistics&& from) noexcept
    : PreflopStatistics() {
    *this = ::std::move(from);
  }

  inline PreflopStatistics& operator=(PreflopStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreflopStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreflopStatistics* internal_default_instance() {
    return reinterpret_cast<const PreflopStatistics*>(
               &_PreflopStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PreflopStatistics* other);
  friend void swap(PreflopStatistics& a, PreflopStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreflopStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  PreflopStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreflopStatistics& from);
  void MergeFrom(const PreflopStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreflopStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .poker.PreFlopStatistic preflop_statistics = 1;
  int preflop_statistics_size() const;
  void clear_preflop_statistics();
  static const int kPreflopStatisticsFieldNumber = 1;
  const ::poker::PreFlopStatistic& preflop_statistics(int index) const;
  ::poker::PreFlopStatistic* mutable_preflop_statistics(int index);
  ::poker::PreFlopStatistic* add_preflop_statistics();
  ::google::protobuf::RepeatedPtrField< ::poker::PreFlopStatistic >*
      mutable_preflop_statistics();
  const ::google::protobuf::RepeatedPtrField< ::poker::PreFlopStatistic >&
      preflop_statistics() const;

  // @@protoc_insertion_point(class_scope:poker.PreflopStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::poker::PreFlopStatistic > preflop_statistics_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fpoker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPreflopStatisticsImpl();
};
// -------------------------------------------------------------------

class PostFlopStatistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PostFlopStatistic) */ {
 public:
  PostFlopStatistic();
  virtual ~PostFlopStatistic();

  PostFlopStatistic(const PostFlopStatistic& from);

  inline PostFlopStatistic& operator=(const PostFlopStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostFlopStatistic(PostFlopStatistic&& from) noexcept
    : PostFlopStatistic() {
    *this = ::std::move(from);
  }

  inline PostFlopStatistic& operator=(PostFlopStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostFlopStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostFlopStatistic* internal_default_instance() {
    return reinterpret_cast<const PostFlopStatistic*>(
               &_PostFlopStatistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PostFlopStatistic* other);
  friend void swap(PostFlopStatistic& a, PostFlopStatistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostFlopStatistic* New() const PROTOBUF_FINAL { return New(NULL); }

  PostFlopStatistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostFlopStatistic& from);
  void MergeFrom(const PostFlopStatistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostFlopStatistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 hand_table_unique_id = 2;
  void clear_hand_table_unique_id();
  static const int kHandTableUniqueIdFieldNumber = 2;
  ::google::protobuf::int64 hand_table_unique_id() const;
  void set_hand_table_unique_id(::google::protobuf::int64 value);

  // double losing_probability = 3;
  void clear_losing_probability();
  static const int kLosingProbabilityFieldNumber = 3;
  double losing_probability() const;
  void set_losing_probability(double value);

  // @@protoc_insertion_point(class_scope:poker.PostFlopStatistic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 hand_table_unique_id_;
  double losing_probability_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fpoker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatisticImpl();
};
// -------------------------------------------------------------------

class PostFlopStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PostFlopStatistics) */ {
 public:
  PostFlopStatistics();
  virtual ~PostFlopStatistics();

  PostFlopStatistics(const PostFlopStatistics& from);

  inline PostFlopStatistics& operator=(const PostFlopStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostFlopStatistics(PostFlopStatistics&& from) noexcept
    : PostFlopStatistics() {
    *this = ::std::move(from);
  }

  inline PostFlopStatistics& operator=(PostFlopStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostFlopStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostFlopStatistics* internal_default_instance() {
    return reinterpret_cast<const PostFlopStatistics*>(
               &_PostFlopStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PostFlopStatistics* other);
  friend void swap(PostFlopStatistics& a, PostFlopStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostFlopStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  PostFlopStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostFlopStatistics& from);
  void MergeFrom(const PostFlopStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostFlopStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .poker.PostFlopStatistic post_flop_statistics = 1;
  int post_flop_statistics_size() const;
  void clear_post_flop_statistics();
  static const int kPostFlopStatisticsFieldNumber = 1;
  const ::poker::PostFlopStatistic& post_flop_statistics(int index) const;
  ::poker::PostFlopStatistic* mutable_post_flop_statistics(int index);
  ::poker::PostFlopStatistic* add_post_flop_statistics();
  ::google::protobuf::RepeatedPtrField< ::poker::PostFlopStatistic >*
      mutable_post_flop_statistics();
  const ::google::protobuf::RepeatedPtrField< ::poker::PostFlopStatistic >&
      post_flop_statistics() const;

  // @@protoc_insertion_point(class_scope:poker.PostFlopStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::poker::PostFlopStatistic > post_flop_statistics_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fpoker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_proto_2fpoker_5fstatistics_2eproto::InitDefaultsPostFlopStatisticsImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PreFlopStatistic

// int32 hand_sorted_id = 1;
inline void PreFlopStatistic::clear_hand_sorted_id() {
  hand_sorted_id_ = 0;
}
inline ::google::protobuf::int32 PreFlopStatistic::hand_sorted_id() const {
  // @@protoc_insertion_point(field_get:poker.PreFlopStatistic.hand_sorted_id)
  return hand_sorted_id_;
}
inline void PreFlopStatistic::set_hand_sorted_id(::google::protobuf::int32 value) {
  
  hand_sorted_id_ = value;
  // @@protoc_insertion_point(field_set:poker.PreFlopStatistic.hand_sorted_id)
}

// double losing_probability = 3;
inline void PreFlopStatistic::clear_losing_probability() {
  losing_probability_ = 0;
}
inline double PreFlopStatistic::losing_probability() const {
  // @@protoc_insertion_point(field_get:poker.PreFlopStatistic.losing_probability)
  return losing_probability_;
}
inline void PreFlopStatistic::set_losing_probability(double value) {
  
  losing_probability_ = value;
  // @@protoc_insertion_point(field_set:poker.PreFlopStatistic.losing_probability)
}

// -------------------------------------------------------------------

// PreflopStatistics

// repeated .poker.PreFlopStatistic preflop_statistics = 1;
inline int PreflopStatistics::preflop_statistics_size() const {
  return preflop_statistics_.size();
}
inline void PreflopStatistics::clear_preflop_statistics() {
  preflop_statistics_.Clear();
}
inline const ::poker::PreFlopStatistic& PreflopStatistics::preflop_statistics(int index) const {
  // @@protoc_insertion_point(field_get:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_.Get(index);
}
inline ::poker::PreFlopStatistic* PreflopStatistics::mutable_preflop_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_.Mutable(index);
}
inline ::poker::PreFlopStatistic* PreflopStatistics::add_preflop_statistics() {
  // @@protoc_insertion_point(field_add:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::poker::PreFlopStatistic >*
PreflopStatistics::mutable_preflop_statistics() {
  // @@protoc_insertion_point(field_mutable_list:poker.PreflopStatistics.preflop_statistics)
  return &preflop_statistics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::poker::PreFlopStatistic >&
PreflopStatistics::preflop_statistics() const {
  // @@protoc_insertion_point(field_list:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_;
}

// -------------------------------------------------------------------

// PostFlopStatistic

// int64 hand_table_unique_id = 2;
inline void PostFlopStatistic::clear_hand_table_unique_id() {
  hand_table_unique_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PostFlopStatistic::hand_table_unique_id() const {
  // @@protoc_insertion_point(field_get:poker.PostFlopStatistic.hand_table_unique_id)
  return hand_table_unique_id_;
}
inline void PostFlopStatistic::set_hand_table_unique_id(::google::protobuf::int64 value) {
  
  hand_table_unique_id_ = value;
  // @@protoc_insertion_point(field_set:poker.PostFlopStatistic.hand_table_unique_id)
}

// double losing_probability = 3;
inline void PostFlopStatistic::clear_losing_probability() {
  losing_probability_ = 0;
}
inline double PostFlopStatistic::losing_probability() const {
  // @@protoc_insertion_point(field_get:poker.PostFlopStatistic.losing_probability)
  return losing_probability_;
}
inline void PostFlopStatistic::set_losing_probability(double value) {
  
  losing_probability_ = value;
  // @@protoc_insertion_point(field_set:poker.PostFlopStatistic.losing_probability)
}

// -------------------------------------------------------------------

// PostFlopStatistics

// repeated .poker.PostFlopStatistic post_flop_statistics = 1;
inline int PostFlopStatistics::post_flop_statistics_size() const {
  return post_flop_statistics_.size();
}
inline void PostFlopStatistics::clear_post_flop_statistics() {
  post_flop_statistics_.Clear();
}
inline const ::poker::PostFlopStatistic& PostFlopStatistics::post_flop_statistics(int index) const {
  // @@protoc_insertion_point(field_get:poker.PostFlopStatistics.post_flop_statistics)
  return post_flop_statistics_.Get(index);
}
inline ::poker::PostFlopStatistic* PostFlopStatistics::mutable_post_flop_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:poker.PostFlopStatistics.post_flop_statistics)
  return post_flop_statistics_.Mutable(index);
}
inline ::poker::PostFlopStatistic* PostFlopStatistics::add_post_flop_statistics() {
  // @@protoc_insertion_point(field_add:poker.PostFlopStatistics.post_flop_statistics)
  return post_flop_statistics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::poker::PostFlopStatistic >*
PostFlopStatistics::mutable_post_flop_statistics() {
  // @@protoc_insertion_point(field_mutable_list:poker.PostFlopStatistics.post_flop_statistics)
  return &post_flop_statistics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::poker::PostFlopStatistic >&
PostFlopStatistics::post_flop_statistics() const {
  // @@protoc_insertion_point(field_list:poker.PostFlopStatistics.post_flop_statistics)
  return post_flop_statistics_;
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fpoker_5fstatistics_2eproto__INCLUDED
