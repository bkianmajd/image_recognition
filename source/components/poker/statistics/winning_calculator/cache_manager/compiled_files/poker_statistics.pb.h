// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poker_statistics.proto

#ifndef PROTOBUF_poker_5fstatistics_2eproto__INCLUDED
#define PROTOBUF_poker_5fstatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_poker_5fstatistics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPreflopStatisticImpl();
void InitDefaultsPreflopStatistic();
void InitDefaultsPreflopStatisticsImpl();
void InitDefaultsPreflopStatistics();
inline void InitDefaults() {
  InitDefaultsPreflopStatistic();
  InitDefaultsPreflopStatistics();
}
}  // namespace protobuf_poker_5fstatistics_2eproto
namespace poker {
class PreflopStatistic;
class PreflopStatisticDefaultTypeInternal;
extern PreflopStatisticDefaultTypeInternal _PreflopStatistic_default_instance_;
class PreflopStatistics;
class PreflopStatisticsDefaultTypeInternal;
extern PreflopStatisticsDefaultTypeInternal _PreflopStatistics_default_instance_;
}  // namespace poker
namespace poker {

// ===================================================================

class PreflopStatistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PreflopStatistic) */ {
 public:
  PreflopStatistic();
  virtual ~PreflopStatistic();

  PreflopStatistic(const PreflopStatistic& from);

  inline PreflopStatistic& operator=(const PreflopStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreflopStatistic(PreflopStatistic&& from) noexcept
    : PreflopStatistic() {
    *this = ::std::move(from);
  }

  inline PreflopStatistic& operator=(PreflopStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreflopStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreflopStatistic* internal_default_instance() {
    return reinterpret_cast<const PreflopStatistic*>(
               &_PreflopStatistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PreflopStatistic* other);
  friend void swap(PreflopStatistic& a, PreflopStatistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreflopStatistic* New() const PROTOBUF_FINAL { return New(NULL); }

  PreflopStatistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreflopStatistic& from);
  void MergeFrom(const PreflopStatistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreflopStatistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 left_id = 1;
  void clear_left_id();
  static const int kLeftIdFieldNumber = 1;
  ::google::protobuf::int32 left_id() const;
  void set_left_id(::google::protobuf::int32 value);

  // int32 right_id = 2;
  void clear_right_id();
  static const int kRightIdFieldNumber = 2;
  ::google::protobuf::int32 right_id() const;
  void set_right_id(::google::protobuf::int32 value);

  // double losing_probability = 3;
  void clear_losing_probability();
  static const int kLosingProbabilityFieldNumber = 3;
  double losing_probability() const;
  void set_losing_probability(double value);

  // @@protoc_insertion_point(class_scope:poker.PreflopStatistic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 left_id_;
  ::google::protobuf::int32 right_id_;
  double losing_probability_;
  mutable int _cached_size_;
  friend struct ::protobuf_poker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_poker_5fstatistics_2eproto::InitDefaultsPreflopStatisticImpl();
};
// -------------------------------------------------------------------

class PreflopStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:poker.PreflopStatistics) */ {
 public:
  PreflopStatistics();
  virtual ~PreflopStatistics();

  PreflopStatistics(const PreflopStatistics& from);

  inline PreflopStatistics& operator=(const PreflopStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreflopStatistics(PreflopStatistics&& from) noexcept
    : PreflopStatistics() {
    *this = ::std::move(from);
  }

  inline PreflopStatistics& operator=(PreflopStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreflopStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreflopStatistics* internal_default_instance() {
    return reinterpret_cast<const PreflopStatistics*>(
               &_PreflopStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PreflopStatistics* other);
  friend void swap(PreflopStatistics& a, PreflopStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreflopStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  PreflopStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreflopStatistics& from);
  void MergeFrom(const PreflopStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreflopStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .poker.PreflopStatistic preflop_statistics = 4;
  int preflop_statistics_size() const;
  void clear_preflop_statistics();
  static const int kPreflopStatisticsFieldNumber = 4;
  const ::poker::PreflopStatistic& preflop_statistics(int index) const;
  ::poker::PreflopStatistic* mutable_preflop_statistics(int index);
  ::poker::PreflopStatistic* add_preflop_statistics();
  ::google::protobuf::RepeatedPtrField< ::poker::PreflopStatistic >*
      mutable_preflop_statistics();
  const ::google::protobuf::RepeatedPtrField< ::poker::PreflopStatistic >&
      preflop_statistics() const;

  // @@protoc_insertion_point(class_scope:poker.PreflopStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::poker::PreflopStatistic > preflop_statistics_;
  mutable int _cached_size_;
  friend struct ::protobuf_poker_5fstatistics_2eproto::TableStruct;
  friend void ::protobuf_poker_5fstatistics_2eproto::InitDefaultsPreflopStatisticsImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PreflopStatistic

// int32 left_id = 1;
inline void PreflopStatistic::clear_left_id() {
  left_id_ = 0;
}
inline ::google::protobuf::int32 PreflopStatistic::left_id() const {
  // @@protoc_insertion_point(field_get:poker.PreflopStatistic.left_id)
  return left_id_;
}
inline void PreflopStatistic::set_left_id(::google::protobuf::int32 value) {
  
  left_id_ = value;
  // @@protoc_insertion_point(field_set:poker.PreflopStatistic.left_id)
}

// int32 right_id = 2;
inline void PreflopStatistic::clear_right_id() {
  right_id_ = 0;
}
inline ::google::protobuf::int32 PreflopStatistic::right_id() const {
  // @@protoc_insertion_point(field_get:poker.PreflopStatistic.right_id)
  return right_id_;
}
inline void PreflopStatistic::set_right_id(::google::protobuf::int32 value) {
  
  right_id_ = value;
  // @@protoc_insertion_point(field_set:poker.PreflopStatistic.right_id)
}

// double losing_probability = 3;
inline void PreflopStatistic::clear_losing_probability() {
  losing_probability_ = 0;
}
inline double PreflopStatistic::losing_probability() const {
  // @@protoc_insertion_point(field_get:poker.PreflopStatistic.losing_probability)
  return losing_probability_;
}
inline void PreflopStatistic::set_losing_probability(double value) {
  
  losing_probability_ = value;
  // @@protoc_insertion_point(field_set:poker.PreflopStatistic.losing_probability)
}

// -------------------------------------------------------------------

// PreflopStatistics

// repeated .poker.PreflopStatistic preflop_statistics = 4;
inline int PreflopStatistics::preflop_statistics_size() const {
  return preflop_statistics_.size();
}
inline void PreflopStatistics::clear_preflop_statistics() {
  preflop_statistics_.Clear();
}
inline const ::poker::PreflopStatistic& PreflopStatistics::preflop_statistics(int index) const {
  // @@protoc_insertion_point(field_get:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_.Get(index);
}
inline ::poker::PreflopStatistic* PreflopStatistics::mutable_preflop_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_.Mutable(index);
}
inline ::poker::PreflopStatistic* PreflopStatistics::add_preflop_statistics() {
  // @@protoc_insertion_point(field_add:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::poker::PreflopStatistic >*
PreflopStatistics::mutable_preflop_statistics() {
  // @@protoc_insertion_point(field_mutable_list:poker.PreflopStatistics.preflop_statistics)
  return &preflop_statistics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::poker::PreflopStatistic >&
PreflopStatistics::preflop_statistics() const {
  // @@protoc_insertion_point(field_list:poker.PreflopStatistics.preflop_statistics)
  return preflop_statistics_;
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_poker_5fstatistics_2eproto__INCLUDED
